generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  orders   Order[]
  wishlist Wishlist[]
  reviews  Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  Rating    Rating[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                String   @id @default(cuid())
  asin              String   @unique
  title             String
  imgUrl            String
  productURL        String
  stars             Float
  reviewCount       Int
  price             Float
  listPrice         Float?
  isBestSeller      Boolean
  boughtInLastMonth Int
  categoryId        Int
  category          Category @relation(fields: [categoryId], references: [id])

  orderItems   OrderItem[]
  wishlistedBy Wishlist[]
  reviews      Review[]
  ratings      Rating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model Category {
  id            Int       @id
  category_name String    @unique
  products      Product[]
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  total      Float
  status     String      @default("pending")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt @default(now())
}

model OrderItem {
  id        String @id @default(cuid())
  orderId   String
  productId String
  quantity  Int    @default(1)
  price     Float

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Wishlist {
  id        String @id @default(cuid())
  userId    String
  productId String

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  content   String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Rating {
  id        String @id @default(cuid())
  userId    String
  productId String
  rating    Int // e.g., 1 to 5

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
}
