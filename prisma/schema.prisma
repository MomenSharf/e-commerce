generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or your DB provider
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  favorites     Favorite[]
  saveForLaters SaveForLater[]
  settings      UserSettings?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id       String  @id @default(cuid())
  userId   String  @unique
  region   String?
  currency String?
  language String?
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                 String      @id @default(cuid())
  timestamp          DateTime    @map("timestamp") @db.Timestamp(6)
  title              String
  sellerName         String      @map("seller_name")
  brandId            String?
  brand              Brand?      @relation(fields: [brandId], references: [id])
  departmentId       String?
  department         Department? @relation(fields: [departmentId], references: [id])
  description        String?
  initialPrice       Float?      @map("initial_price")
  finalPrice         Float?      @map("final_price")
  currency           String?
  availability       Boolean
  reviewsCount       Int?        @map("reviews_count")
  categories         Category[]  @relation("ProductCategories")
  asin               String      @unique
  buyboxSeller       String?     @map("buybox_seller")
  numberOfSellers    Int?        @map("number_of_sellers")
  rootBsRank         Int?        @map("root_bs_rank")
  answeredQuestions  Int?        @map("answered_questions")
  domain             String?
  imagesCount        Int?        @map("images_count")
  url                String?
  videoCount         Int?        @map("video_count")
  imageUrl           String?     @map("image_url")
  itemWeight         String?     @map("item_weight")
  rating             Float?
  productDimensions  String?     @map("product_dimensions")
  sellerId           String?     @map("seller_id")
  dateFirstAvailable DateTime?   @map("date_first_available")
  discount           String?
  modelNumber        String?     @map("model_number")
  manufacturer       String?
  plusContent        String?     @map("plus_content")
  upc                String?
  video              String?
  topReview          String?     @map("top_review")
  variations         Json?
  delivery           String?
  format             String?
  buyboxPrices       String?     @map("buybox_prices")
  parentAsin         String?     @map("parent_asin")
  inputAsin          String?     @map("input_asin")
  ingredients        String?
  originUrl          String?     @map("origin_url")
  boughtPastMonth    Boolean?    @map("bought_past_month")
  isAvailable        Boolean?    @map("is_available")
  rootBsCategory     String?     @map("root_bs_category")
  bsCategory         String?     @map("bs_category")
  bsRank             Int?        @map("bs_rank")
  badge              String?
  subcategoryRank    Int?        @map("subcategory_rank")
  amazonChoice       Boolean?    @map("amazon_choice")
  images             String?
  productDetails     String?     @map("product_details")
  pricesBreakdown    String?     @map("prices_breakdown")
  countryOfOrigin    String?     @map("country_of_origin")

  favorites     Favorite[]
  saveForLaters SaveForLater[]

  @@index([brandId])
  @@index([asin])
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model SaveForLater {
  id        String  @id @default(cuid())
  userId    String
  productId String
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model Category {
  id       String     @id @default(cuid())
  name     String     @unique
  products Product[]  @relation("ProductCategories")
}

model Brand {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

model Department {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}
